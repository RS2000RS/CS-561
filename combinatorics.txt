                    Combinatorics: how many ways?

Consider strings of letters. (We don't worry about running out of
    letters if some variable is > 26, we can imagine we have an
    infinite alphabet.) I use upper case letters to represent the
    letters themselves, and lower case letters to be variables
    representing numbers.

Here are 3 important combinatorics problems. If you know these 3
    problems well, then you know a lot:


1. Suppose we have a given string of letters, let's call it the "limit
       string".
How many strings of the same length, including the limit string
    itself, are there in which each letter is <= the corresponding letter
    in the limit string?
For example, if the limit string is CAB, then we have 6 strings:
     AAA, AAB, BAA, BAB, CAA, CAB
An important special case is when every letter of the limit string is
     the same. For example, if the limit string is BBB, then we have 8
     strings: AAA, AAB, ABA, ABB, BAA, BAB, BBA, BBB. We can look at that
     as representing the eight possible 3-bit numbers.
     For another example, if the limit string is JJJ, then we have 1000
     strings, which we can look at as representing the representing the
     1000 3-digit numbers (000 == AAA, 999 == JJJ, 542 == FEC, etc.)
Another important special case is when the limit string has length 2.
    For example, if the limit string is HI, we have 8*9 == 72 strings:
    if there are x ways to do the first thing, and y ways to do the
    second thing, then there are x*y ways to do the first thing and then
    the second thing.


2. How many strings of length n are there in which each of the first n
       letters of the alphabet appears? In other words, if we have the
       first n letters, how many different ways can they be ordered?
For example, if n == 3, we have 6 strings: ABC, ACB, BAC, BCA, CAB, CBA.


3. Suppose we have a + b + ... == n, where the number of terms on the
       left can be whatever we need it to be for the problem we're
       solving.
For example, if the number of terms is 4, we'd have a+b+c+d == n, but
    the number of terms might instead be less than 4 or greater than 4.
How many strings of length n are there in which we have
    a A's, b B's, ...?
For example, how many strings of length 4 have 1 A, 1 B, and 2 C'S?
    We have 1 + 1 + 2 == 4, and that gives 12 strings:
        ABCC, ACBC, ACCB, BACC, BCAC, BCCA,
        CABC, CACB, CBAC, CBCA, CCAB, CCBA.
    We can denote this as

        4
       C      == 12
        1,1,2

An important special case is when we have 2 terms:
    a + b == n, how many strings of length n have a A's and b B's?
    For example, if we have 2 + 3 == 5, how many strings of length 5
    have 2 A's and 3 B's? There are 10: AABBB, ABABB, ABBAB, ABBBA,
        BAABB, BABAB, BABBA, BBAAB, BBABA, BBBAA
    We can denote this as

    5             5     5
   C    == 10 == C  == C
    2,3           2     3

It's very common, when we know we're working with 2 terms, to only
   write one of the 2 terms in the subscript. For instance,

    5                           5        5
   C  is obviously the same as C    and C
    2                           2,3      3

   because if we're adding 2 numbers to get 5 and one of the numbers is
   2, then the other number must be 3.

    5
   C  is often read "5 choose 2"
    2

   because we have 5 letter positions and we're choosing which 2 of
   those positions to be A (the others being B). This is of course equal
   to "5 choose 3", the number of ways to choose which 3 of those
   positions to be B (the others being A).
Let's adopt the typographical conventions that

        5      5
       C  and C
        2      1,2,2

   are also written as C(5, 2) and C(5; 1,2,3) respectfully.

------------------------------------------------------------------------

The problems we encounter with combinations/permutations will use the
    above 3 problems as building blocks. For each combinatorics problem
    we encounter from now on, think about to represent the problem as
    being equivalent to one of the 3 problems above, or a combination of
    problems above.

4.  I'm ordering a meal at a restaurant in which
    I choose an entree: either hamburger, chicken, or fried eel
    I choose a salad: either Cobb, Ceasar, Waldorf, or Tuna
    I choose dessert: one of the 31 Baskin-Robbins flavors of ice cream
    How many different ways can I order?
    Answer: This is equivalent to Problem 1 above where the limit word
        is CD$, and $ stands for the 31'st letter of the alphabet. There
        are 3 ways to choose the first thing, 4 ways to choose the
        second thing, and 31 ways to choose the third thing, so that
        makes 3*4*31 ways to order.
    In problems like this with specific numbers, don't bother
    multiplying out the answer, the correct answer is just 3*4*31.
    Likewise, if the answer to a problem with specific numbers were
        10 factorial, then the correct answer would be 10!, you don't
        need to multiply all those numbers together.
    Likewise, if the correct answer answer to a problem with specific
        numbers were C(20, 10) or C(100; 10, 20, 30, 40), then those
        would be the correct answers, you don't have to compute those
        numbers.
    However, be sure that you can answer a question like
        Express C(100; 10, 20, 30, 40) / C(30, 10) using factorials
        instead of C's: it's ok to use a symbol like C(30, 10), but you
        have to know what it means.

5.  My morning routine consists of rolling a die, flipping a coin,
        picking a card from a shuffled 52-card deck, and then randomly
        choosing a sock from my sock drawer of 17 socks. (My 17 socks
        are all different, I don't have pairs of socks.) How many ways
        are there for me to start my morning? (Again, don't bother
        doing the arithmetic, use math symbols in your answer.)

6.  10 contestants compete in a beauty contest in which 8 different
        prizes are given out for first place, second place, ...,
        eighth place. (So 2 contestants go home with nothing.)
        How many ways can the judge decide who gets which prizes?
    Answers: One way to solve this is with Problem 2: There are 10! ways
        to order the contestants, and each way of distributing the
        prizes corresponds to 2 orderings of the contestants (because
        the two losers can switch places without affecting who gets
        which prizes). So, there are 10! / 2 ways to distribute the
        prizes.
    Another way to solve this is with Problem 3: From the 10 contestants
        we choose 1 to get first place, 1 to get second place, ...,
        1 to get eighth place, and 2 to get nothing, so the number of
        ways is C(10; 1,1,1,1,1,1,1,1,2) (which is the same as 10! / 2).

7.  How many alphabetized strings consist of 3 different letters, each
        letter <= J? For instance, BEG would qualify, but not BEE (not
        (different letters), and not BJE (not alphabetized).
    Answer: This is equivalent to the 2-term special case of Problem 3.
        In Problem 3, there are C(10, 3) strings like BBBAABBABB, With
        length 10, 3 A's, and the rest B's. In Problem 3, we're choosing
        3 of the 10 positions to be A, and there are C(10, 3) ways to do
        that. In Problem 7, we're again choosing 3 things out of 10,
        but the 10 things we're choosing from are letters instead of
        positions in the string. Once we choose which 3 letters we want,
        we have exactly one string, since the letters have to be in
        alphabetical order.

8.  Same as #7, but now the 3 letters don't have to be in alphabetical
        order (but they still have to be different).
    Answer: One way to solve this is to use Problem 1: we have 10
        different choices for the first letter, 9 different choices for
        the second letter (which can't be the same as the first letter),
        and 8 different choices for the third letter. So we have 10*9*8
        possibilities. The choices available for the second letter
        depend on the first letter, but the *number* of choices
        available for the second letter doesn't depend on the first
        letter (likewise for the third letter); Problem 1 applies as
        long as the *number* of choices at one point doesn't depend on
        previous choices made.
    Another way we can solve this is to use Problem 2: Problem 7 gave us
        C(10, 3) alphabetized strings, and Problem 2 tells us that each
        alphabetized string can be rearranged in 3! ways, so that gives
        us C(10, 3) * 3!. (Of course the 10*9*8 answer we got the with
        the first solution is equal to the C(10, 3) * 3! answer we got
        with the second solution.)

9.  Same as #7, but now the letters don't have to be in alphabetical
        order, and they don't have to be distinct.
    This one's easy, the first special case of Problem 1 applies.

10. Same as #7, but now the letters don't have to be distinct (but they
        do have to be in alphabetical order). For example, BEE
        qualifies, but BED doesn't.
    This one's not easy at all, IMO, if you haven't seen the trick.
        Applying the special case of Problem 3 is the key to the answer,
        but how can we apply the meaning of C(n, k) to this problem?
        C(10, 3) is the number of ways of choosing 3 *different* things
        from a group of 10, but we're allowed to repeat letters in this
        problem, so C(10, 3) doesn't really help us.
        To get the answer, consider a super-simple computer language
        with one variable that starts with value 'A' (the variable
        doesn't even need a name, since since there's only one).
        The language has exactly two statements:
            P: the P command prints the variable
            I: the I command increments the variable
        Every program has 12 statements, consisting of 3 P statements
        and 9 I statements. The variable is always 'J' at the end of a
        program (because it starts at 'A', and is incremented 9 times).
        Now we can associate each 3-letter string with a 12-statement
        program:
            AAA  PPPIIIIIIIII
            AAB  PPIPIIIIIIII
            AAC  PPIIPIIIIIII
            ...
            BEE  IPIIIPPIIIII
            ...
            JJJ  IIIIIIIIIPPP
        This is a 1-1 correspondence between the 3-letter strings and
        the 12-statement programs. Problem 3 tells us that there are
        C(12, 3) of these 12-statement programs, so now we know that
        there are C(12, 3) of these 3-letter strings.


11. I have 6 friends, and I've decided to invite 4 to a party.
    How many different ways can I write my invitation list?
    In combinatorics problems like this one, we can't really know what
        we're doing unless we specify exactly what we mean by
        "different" ways. Let's say two lists are different if one of
        them has a name that's not on the other: the order of the names
        doesn't matter.

12. Same as Problem 11, but now the order of the friends on the list
    matters. If I'm inviting Allen, Bill, Chuck, and Denise, then
        ABCD
    and
        CBDA
    are two different lists, and need to be counted separately.
    How many ways can I write my invitation list now?

13. A traffic court judge has 100 cases pending. Each case is required
            to have one of 4 outcomes:
        Not guilty, have a nice day
        Guilty, pay a fine
        Very Guilty, go to jail
        Extremely Guilty, put to death immediately
    How many ways can the judge decide the cases? (The judge can't
        affect the order of the cases, he just decides each one as it
        comes before him.)

14. Same as Problem #13, except now the legislature has passed a new
        law: the judge must choose each of the 4 possible verdicts the
        same total number of times (25+25+25+25).
    How many ways can the judge decide the cases?

15. Same as Problem #13, except the legislature has replaced the law in
    Problem #14 with a new law: after the first case, the judge isn't
    allowed to give a lesser (nicer) verdict in any case than he gave in
    the previous case.


16. How many 9-digit numbers are there that contain each of the nine
    non-zero digits? For example, 486230192 doesn't qualify because it
    doesn't have 5 or 7.

17. How many of those numbers in Problem 16 alternate odd and even
    digits?

18. The best candy is Skittles; a bag of Skittles contains Red, Orange,
        Yellow, Green, and Purple colors. How many different ways can I
        take 5 Skittles from a bag?
    Once again, I have to specify what I mean by "different" ways for
        this to be a sensible question.
    Let's say that "different" means different color (ROYYG != ROYYP),
        different number (ROYYG != ROYGG), or different order
        (ROYYG != ROYGY).

19. Same as Problem 18, but now "different" means different color
    (ROYYG != ROYYP), different number (ROYYG != ROYGG), but regardless
    of order (ROYYG == ROYGY).

20. Same as Problem 18, but now two ways are "different" iff (if and
        only if) one contains a color the other doesn't, regardless of
        order, and regardless of how many times a color is repeated; 
        all that matters is whether a color is present. So,
        ROYYG == GORRY (they both have the same 4 colors), and
        ROYYG != ROYGP (one has purple and the other doesn't).

21. Suppose I'm in a rectangular grid of city streets that run
        noth/south and east/west, currently at the (0, 0) intersection.
        I wish to walk to the (20, 15) intersection, walking a total of
        35 blocks: a total of 20 blocks east and 15 blocks north.
    How many ways can I get there from here? I'm not willing to follow a
        path that's longer than 35 blocks.

22. Same as Problem 21, but now there's a nice lady at the (4, 6)
        intersection that I'd really like to see on my journey to
        (20, 15). (35 blocks is still my walking limit.)   
    How many ways can I do that?

23. Same as Problem #22, but not now there's a second nice lady at the
        (12, 10) intersection. How many ways can I get to my destination
        and see both ladies on my way?

24. Like Problem #23, there are still two nice ladies, but now they're
        at intersections (5, 12) and (16, 9). Now there's no way for me
        to say hello to both ladies, but how many ways can I get to
        (20, 15) and say hello to one of them (either one is ok)?

25. Like Problem 21, but no more nice ladies. This time, there's a
    rough-looking gangster at (10, 6). How many ways can I get to
    (20, 15) without passing through (10, 6)?

26. Like Problem 25, but now there's a second gangster at (6, 11).
    How many ways can I get to (20, 15) without passing through
    intersection (10, 6) or (6, 11)?.

27. Like Problem 26, still two gangsters, but now they've moved to
        intersections (6, 6) and (10, 11). How many ways are there for
        me now to get to (20, 15)?
    Problem 27, with its two gangsters, certainly looks similar to 
       Problem 26, with its two gangsters. But you'll notice that
       Problem 27 is subtely a bit more complex than Problem 26.
       To make sure you've correctly handled the added trick in
       Problem 27, I suggest taking your Problem 27 solution, and
       applying it to the simpler problem:
           How many ways can I get from (0, 0) to (3, 3) while avoiding
               gangsters at (1, 1) and (2, 2)?
       That's simple enough to easily check by hand to make sure you
       have the right answer.

28. Weary from all my walking, I now have a helicopter drone that I
        program. The flight begins at intersection (0, 0), 10 stories
        above ground level. The flight ends at intersection (20, 15) at
        ground level. My drone has 4 commands
        E: fly one block east (I'm going a total of 20 blocks east)
        N: fly one block north (I'm going a total of 15 block north)
        D: descend one story (I'm descending a total of 10 stories)
        L: drop one leaflet (I'm dropping a total of 25 leaflets,
                             telling people not to litter)
    The 70 commands can be given in any order. How many ways are there
        to program my drone to do what I want?

29. I have 20 identical pet cats, all named Zazzles. I have 10 different
        pet dogs, named Alfred, Bowser, ..., Jumper. Each night, I have 
        all my pets get in a line for dinner. How many ways can they
        form a line?
    For example, if I had 1 cat and 2 dogs, there would be 6 ways:
        ABZ, AZB, BAZ, BZA, ZAB, ZBA
    However, if I had 2 cats and 1 dog, there would only be 3 ways:
        AZZ, ZAZ, ZZA
    When 2 dogs switch places, that a different way, because the dogs
        are distinct, but when 2 cats switch places, that's still the
        same way, because cats are identical.

30. Like Problem 29, but I just bought a paint gun, and now I can tell
        my cats apart. Now how many ways can my pets line up for dinner?

31. How many strings of length 101 are there where each character is A
        or B, and in which there are more A's than B's?

32. Same question as Problem 31, but now the strings have length 100.
        (Don't overlook the fact that Problem 32 is a bit more complex
         than Problem 31.)

33. How many different ways can we add (any number of) positive integers
        and get the total 4?
    Again, I have to specify what I mean by "different ways" to have a
        sensible question.
    Let's say that two additions are different if they have a different
        number of terms, or if the terms are different or in a different
        order; but they're not different of they're just parenthesized
        differently. For example, we count 1+1+2 and 1+2+1 as different
        ways, but we count (1+1)+2 and 1+(1+2) as the same way, so we
        just say 1+1+2.
    Of course, 4 is a small number, so we can just count them:
            4  1+3  2+2  3+1  1+1+2  1+2+1  2+1+1  1+1+1+1,
        but how can we get the number of ways for an arbitrary total,
        using our first 3 problems as building blocks?
    Answer: This is another problem where the solution is very simple
        when you see it the right way, but it can take a lot of beers
        before do. (You know I'm kidding about the beers, right?)
        The trick here is to picture the 4 as a bunch of 1's, separated
            by marks:  1'1'1'1
        I'll number the marks 1, 2, and 3. Each mark is an opportunity,
            which can be taken or declined, to demark a term.
        In other words, each mark can be kept or discarded.
        If we decide to keep mark 1, discard mark 2, and keep mark 3,
            we get, 1'11'1,  which corresponds to 1+2+1
        If instead we decide to discard mark 1, and keep marks 2 and 3,
            we get 11'1'1,  which corresponds to 2+1+1
        If we keep all the marks, we get 1+1+1+1; if we discard all the
            marks, we just get 4
        So now we have an easy example of Problem 1: at each mark, there
            are 2 options, so with 3 marks we have 2*2*2 == 8 ways to
            make a sum. If we were adding numbers to get the total 1000,
            we would obviously have 2 ** 999 ways (where I'm using the
            ** symbol to denote exponentiation, even though C++ doesn't
            use the ** symbol). If your calculator is correct to 301
            digits of accuracy, you can punch this in to get the answer

                              5,357,543,035,931,336,604,742,125,245,300,
            009,052,807,024,058,527,668,037,218,751,941,851,755,255,624,
            680,612,465,991,894,078,479,290,637,973,364,587,765,734,125,
            935,726,428,461,570,217,992,288,787,349,287,401,967,283,887,
            412,115,492,710,537,302,531,185,570,938,977,091,076,523,237,
            491,790,970,633,699,383,779,582,771,973,038,531,457,285,598,
            238,843,271,083,830,214,915,826,312,193,418,602,834,034,688

34. How many ways are there to add exactly 4 positive integers to get
        the total 16? Like Problem 33, we're counting different
        orderings of terms as different ways, but ignoring different
        parenthesizing.
    Hint: This is a different problem than Problem 33, with a different
        answer, but the first idea is the same: imagine 16 1's,
        separated by 15 marks.

35. Same as Problem 34, but now the terms are whole numbers instead of
        positive integers. (You'll recall that 0 is a whole number but
        not a positive integer, so the answer to Problem 35 will be
        larger than the answer to Problem 34.)
    Hint: Think of a way to transform Problem 35 into a problem like
        Problem 34.

36. Same as Problem 33, but now the terms are whole numbers instead of
        positive integers.
    Apology: Sorry, when I wrote this, I thought it was funny to have a
        question with a goofy answer that you could get without having
        to know any combinatorics and without having to calculate
        anything. (I know, I'm humor-impaired.) But I might still
        include this problem on a test just to give you an easy question
        for a short break - and if you get the right answer, that shows
        that you know exactly what a whole number is, right?

37. Same as Problem 34, but now there's the added restriction that the
        first term must be >= 3 and the last term must be >= 4. (So 16
        by itself qualifies, since the 16 is both the first term and the
        last term.)
    Hint: again, think about 16 1's separated by 15 marks.

38. This is a combinatorics problem about sequences. A sequence is a
        list of numbers where we care about the order: the sequence
        (2, 4, 6) is a different from the sequence (6, 4, 2). A sequence
        can have a finite or an infinite number of elements, but we're
        only interested in finite sequences here. A sequence is called
        "monotonically increasing" if each element after the first is >=
        its predecessor. For example, (5, 8, 8, 10) is monotonically
        increasing, but (5, 8, 7, 10) is not.
    There are 6 monotonically increasing sequences of whole numbers with
        2 terms, each term < 3:
            (0, 0)  (0, 1)  (0, 2)  (1, 1)  (1, 2)  (2, 2)
    How many monotonically increasing sequences of whole numbers with 10
        terms are there, each term < 20?
    Hint: Problem 10

39. Like as Problem 38, but replace "monotonically increasing" (defined
        with >=) with "strictly monotonically increasing" (same
        definition as "monotonically increasing" except that >= is
        replaced with >)
    So, for example, there are 3 strictly monotonically increasing
        sequences of whole numbers with 2 terms, each term < 3:
            (0, 1)  (0, 2)  (1, 2)
    How many strictly monotonically increasing sequences of whole
        numbers with 10 terms are there, each term < 20?

40. Same as Problem 39, except there's an additional restriction:
       each term must be even.
